type AddLiquidityAmountsReply = record {
  add_lp_token_amount : nat;
  amount_0 : nat;
  amount_1 : nat;
  address_0 : text;
  address_1 : text;
  symbol_0 : text;
  symbol_1 : text;
  chain_0 : text;
  chain_1 : text;
  symbol : text;
  fee_0 : nat;
  fee_1 : nat;
};
type AddLiquidityArgs = record {
  signature_0 : opt text;
  signature_1 : opt text;
  token_0 : text;
  token_1 : text;
  amount_0 : nat;
  amount_1 : nat;
  tx_id_0 : opt TxId;
  tx_id_1 : opt TxId;
};
type AddLiquidityReply = record {
  ts : nat64;
  request_id : nat64;
  status : text;
  tx_id : nat64;
  add_lp_token_amount : nat;
  transfer_ids : vec TransferIdReply;
  amount_0 : nat;
  amount_1 : nat;
  claim_ids : vec nat64;
  address_0 : text;
  address_1 : text;
  symbol_0 : text;
  symbol_1 : text;
  chain_0 : text;
  chain_1 : text;
  symbol : text;
};
type AddPoolArgs = record {
  signature_0 : opt text;
  signature_1 : opt text;
  token_0 : text;
  token_1 : text;
  amount_0 : nat;
  amount_1 : nat;
  tx_id_0 : opt TxId;
  tx_id_1 : opt TxId;
  lp_fee_bps : opt nat8;
};
type AddPoolReply = record {
  ts : nat64;
  request_id : nat64;
  status : text;
  tx_id : nat64;
  lp_token_symbol : text;
  add_lp_token_amount : nat;
  transfer_ids : vec TransferIdReply;
  name : text;
  balance_0 : nat;
  balance_1 : nat;
  amount_0 : nat;
  amount_1 : nat;
  claim_ids : vec nat64;
  address_0 : text;
  address_1 : text;
  symbol_0 : text;
  symbol_1 : text;
  pool_id : nat32;
  chain_0 : text;
  chain_1 : text;
  is_removed : bool;
  symbol : text;
  lp_fee_bps : nat8;
};
type AddTokenArgs = record { token : text };
type AddTokenReply = variant { IC : ICReply; Solana : SolanaReply };
type ConsentInfo = record {
  metadata : ConsentMessageMetadata;
  consent_message : ConsentMessage;
};
type ConsentMessage = variant {
  LineDisplayMessage : record { pages : vec LineDisplayPage };
  GenericDisplayMessage : text;
};
type ConsentMessageMetadata = record {
  utc_offset_minutes : opt int16;
  language : text;
};
type ConsentMessageRequest = record {
  arg : blob;
  method : text;
  user_preferences : ConsentMessageSpec;
};
type ConsentMessageSpec = record {
  metadata : ConsentMessageMetadata;
  device_spec : opt DisplayMessageType;
};
type DisplayMessageType = variant {
  GenericDisplay;
  LineDisplay : record { characters_per_line : nat16; lines_per_page : nat16 };
};
type ErrorInfo = record { description : text };
type ICReply = record {
  fee : nat;
  decimals : nat8;
  token_id : nat32;
  chain : text;
  name : text;
  canister_id : text;
  icrc1 : bool;
  icrc2 : bool;
  icrc3 : bool;
  is_removed : bool;
  symbol : text;
};
type ICTransferReply = record {
  is_send : bool;
  block_index : nat;
  chain : text;
  canister_id : text;
  amount : nat;
  symbol : text;
};
type Icrc28TrustedOriginsResponse = record { trusted_origins : vec text };
type LineDisplayPage = record { lines : vec text };
type Result = variant { Ok : AddLiquidityReply; Err : text };
type Result_1 = variant { Ok : AddLiquidityAmountsReply; Err : text };
type Result_2 = variant { Ok : nat64; Err : text };
type Result_3 = variant { Ok : AddPoolReply; Err : text };
type Result_4 = variant { Ok : AddTokenReply; Err : text };
type Result_5 = variant { Ok : ConsentInfo; Err : ErrorInfo };
type Result_6 = variant { Ok : text; Err : text };
type SolanaReply = record {
  fee : nat;
  decimals : nat8;
  token_id : nat32;
  chain : text;
  name : text;
  program_id : text;
  is_spl_token : bool;
  mint_address : text;
  symbol : text;
};
type SolanaTransferReply = record {
  is_send : bool;
  signature : text;
  chain : text;
  slot : opt nat64;
  amount : nat;
  mint_address : text;
  symbol : text;
};
type SupportedStandard = record { url : text; name : text };
type TransferIdReply = record { transfer_id : nat64; transfer : TransferReply };
type TransferReply = variant {
  IC : ICTransferReply;
  Solana : SolanaTransferReply;
};
type TxId = variant { TransactionId : text; BlockIndex : nat };
type UpdateTokenArgs = record {
  decimals : opt nat8;
  token : text;
  name : opt text;
  symbol : opt text;
};
service : () -> {
  add_liquidity : (AddLiquidityArgs) -> (Result);
  add_liquidity_amounts : (text, nat, text) -> (Result_1) query;
  add_liquidity_async : (AddLiquidityArgs) -> (Result_2);
  add_pool : (AddPoolArgs) -> (Result_3);
  add_token : (AddTokenArgs) -> (Result_4);
  icrc10_supported_standards : () -> (vec SupportedStandard) query;
  icrc1_name : () -> (text) query;
  icrc21_canister_call_consent_message : (ConsentMessageRequest) -> (Result_5);
  icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse);
  update_token : (UpdateTokenArgs) -> (Result_4);
  validate_add_liquidity : () -> (Result_6);
}
